name: VolatiQ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: volatiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 mypy
        
    - name: Code formatting check
      run: |
        black --check --diff .
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy api/ --ignore-missing-imports
        mypy model/ --ignore-missing-imports
        
    - name: Create test model files
      run: |
        mkdir -p model/saved_model
        python -c "
import tensorflow as tf
import joblib
import numpy as np
from sklearn.preprocessing import StandardScaler
# Create dummy model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(10, activation='relu', input_shape=(5,)),
    tf.keras.layers.Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.save('model/saved_model/volatility_model.keras')
# Create dummy scaler
scaler = StandardScaler()
scaler.fit(np.random.randn(100, 5))
joblib.dump(scaler, 'model/saved_model/scaler.save')
"

    - name: Run tests with coverage
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/volatiq_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r api/ model/ -f json -o security-report.json
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t volatiq:${{ github.sha }} .
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-volatiq -p 5000:5000 volatiq:${{ github.sha }}
        sleep 30
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        docker stop test-volatiq
        
    - name: Login to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Push to DockerHub
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag volatiq:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/volatiq:latest
        docker tag volatiq:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/volatiq:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/volatiq:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/volatiq:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # e.g., kubectl apply, docker-compose, or cloud provider CLI
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # e.g., kubectl apply, AWS ECS, or other cloud deployments

  performance-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: |
        # Start the application
        docker run -d --name perf-test -p 5000:5000 volatiq:${{ github.sha }}
        sleep 30
        
        # Run k6 performance test
        k6 run tests/performance/load-test.js
        
        docker stop perf-test
