version: '3.8'

services:
  volatiq-api:
    build: .
    container_name: volatiq-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - MODEL_PATH=/app/model/saved_model/volatility_model.keras
      - SCALER_PATH=/app/model/saved_model/scaler.save
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./model/saved_model:/app/model/saved_model
    command: python api/app.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - volatiq-network

  volatiq-dashboard:
    build: .
    container_name: volatiq-dashboard
    ports:
      - "8050:8050"
    environment:
      - API_URL=${API_URL:-http://volatiq-api:5000}
      - DASH_ENV=${DASH_ENV:-production}
    depends_on:
      volatiq-api:
        condition: service_healthy
    command: python dashboard/app.py
    restart: unless-stopped
    networks:
      - volatiq-network

  # Optional: PostgreSQL database for production use
  volatiq-db:
    image: postgres:15-alpine
    container_name: volatiq-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-volatiq}
      - POSTGRES_USER=${POSTGRES_USER:-volatiq}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - volatiq-network

  # Optional: Redis for caching and session management
  volatiq-redis:
    image: redis:7-alpine
    container_name: volatiq-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - volatiq-network

networks:
  volatiq-network:
    driver: bridge

volumes:
  postgres_data:
